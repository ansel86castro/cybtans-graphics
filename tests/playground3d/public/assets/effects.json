{"programs":{"billboard":{"name":"billboard","vertexShader":{"inputs":{"POSITION":"a_position","TEXCOORD":"a_texCoord"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_Billboard":{"target":"BillboardManager","property":"billboardMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec2 a_texCoord;\r\n\r\nuniform mat4 u_Billboard;\r\nuniform mat4 u_World;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec2 v_texCoord;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * u_Billboard * vec4(a_position, 1));\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;    \r\n}"},"fragmentShader":{"parameters":{"diffuse":{"target":"Billboard","property":"color","type":"float4"},"uDiffuseSampler":{"target":"Billboard","property":"texture","type":"sampler2D"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nin vec3 v_positionW;\r\nin vec2 v_texCoord;\r\n\r\nvec4 diffuse;\r\nuniform sampler2D uDiffuseSampler;\r\n\r\nout vec4 Color;\r\n\r\nvoid main() \r\n{\r\n    Color = texture(uDiffuseSampler, v_texCoord);\r\n    if (Color.a \u003C 0.001f)\r\n        discard;\r\n}"}},"default":{"name":"default","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uLight.pos":{"target":"LightComponent","property":"worldPosition","type":"float3"},"uLight.dir":{"target":"LightComponent","property":"worldDirection","type":"float3"},"uLight.diffuse":{"target":"Light","property":"diffuse","type":"float3"},"uLight.specular":{"target":"Light","property":"specular","type":"float3"},"uLight.spotPower":{"target":"Light","property":"spotPower","type":"float"},"uLight.att":{"target":"Light","property":"attenuation","type":"float3"},"uLight.range":{"target":"Light","property":"range","type":"float"},"uLight.type":{"target":"Light","property":"type","type":"float"},"uAmbient":{"target":"Light","property":"ambient","type":"float3"},"uHemisphereLight.skyColor":{"target":"AmbientLight","property":"skyColor","type":"float3"},"uHemisphereLight.groundColor":{"target":"AmbientLight","property":"groundColor","type":"float3"},"uHemisphereLight.northPole":{"target":"AmbientLight","property":"northPole","type":"float3"},"uEyePos":{"target":"Camera","property":"position","type":"float3"},"uMaterial.diffuse":{"target":"Material","property":"diffuse","type":"float4"},"uMaterial.specular":{"target":"Material","property":"specular","type":"float3"},"uMaterial.specularPower":{"target":"Material","property":"specularPower","type":"float"},"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nstruct Hemispherical {\r\n    vec3 skyColor;\r\n    vec3 groundColor;\r\n    vec3 northPole;\r\n};\r\n\r\nstruct Light {\r\n    vec3 pos;\r\n    vec3 dir;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    vec3 att;\r\n    float range;\r\n    float spotPower;\r\n    float type;\r\n};\r\n\r\nstruct Material {\r\n    vec4 diffuse;\r\n    vec3 specular;\r\n    float specularPower;\r\n};\r\n\r\nuniform Light uLight;\r\nuniform Hemispherical uHemisphereLight;\r\nuniform vec3 uAmbient;\r\nuniform vec3 uEyePos;\r\nuniform Material uMaterial;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\n\r\nout vec4 Color;\r\n\r\nvec4 lit(float NdotL, float NdotH, float m){\r\n\r\n  float ambient = 1.0;\r\n  float diffuse = max(NdotL, 0.0);\r\n  float specular = step(0.0, NdotL) * max(NdotH, 0.0);\r\n  specular = pow(specular, m);\r\n  return vec4(ambient, diffuse, specular, 1.0);\r\n}\r\n\r\n\r\nvec3 ComputeHemisphere()\r\n{\r\n\tfloat k = 0.5f \u002B 0.5f * dot(v_normalW, uHemisphereLight.northPole);\r\n\treturn mix(uHemisphereLight.groundColor ,uHemisphereLight.skyColor , k) * ( v_occ);\t\r\n}\r\n\r\n\r\nvec3 DirectionalLight(vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n\tvec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = -uLight.dir;\r\n\r\n    float nDotL = dot(v_normalW, lightDir);\r\n    vec3 reflection = (2.0 * v_normalW * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\t//vec3 h = normalize(lightDir \u002B toEye);\r\n    //float nDotH = dot(v_normalW, h);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\t//add diffuse contribution\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\t\r\n    return color;\r\n}\r\n\r\nvec3 PointLight(vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n    vec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = uLight.pos - v_positionW;\r\n\t// The distance from Surface to Light.\r\n\tfloat d = length(lightDir);\r\n\r\n\tif( d \u003E uLight.range ) \r\n        return vec3(0.0f, 0.0f, 0.0f);\r\n\t\r\n    // Normalize the Light vector.\r\n\tlightDir /= d;\t\r\n\r\n    float nDotL = dot(v_normalW, lightDir);\r\n    vec3 reflection = (2.0 * v_normalW * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\tcolor /=  dot(uLight.att, vec3(1.0f, d, d*d));\r\n    return color;\r\n}\r\n\r\n\r\n\r\nvoid main() \r\n{\r\n    vec4 diffuse  = texture(uDiffuseSampler, v_texCoord);\r\n    diffuse *= uMaterial.diffuse;\r\n\r\n    Color = diffuse;\r\n    Color.rgb *= ComputeHemisphere();\r\n    Color.rgb \u002B= uLight.type == 1.0f? \r\n                DirectionalLight(diffuse.rgb, uMaterial.specular, uMaterial.specularPower): \r\n                PointLight(diffuse.rgb, uMaterial.specular, uMaterial.specularPower);\r\n}"}},"earth":{"name":"earth","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uLight.pos":{"target":"LightComponent","property":"worldPosition","type":"float3"},"uLight.dir":{"target":"LightComponent","property":"worldDirection","type":"float3"},"uLight.diffuse":{"target":"Light","property":"diffuse","type":"float3"},"uLight.specular":{"target":"Light","property":"specular","type":"float3"},"uLight.spotPower":{"target":"Light","property":"spotPower","type":"float"},"uLight.att":{"target":"Light","property":"attenuation","type":"float3"},"uLight.range":{"target":"Light","property":"range","type":"float"},"uLight.type":{"target":"Light","property":"type","type":"float"},"uAmbient":{"target":"AmbientLight","property":"ambientColor","type":"float3"},"uEyePos":{"target":"Camera","property":"position","type":"float3"},"uMaterial.diffuse":{"target":"Material","property":"diffuse","type":"float4"},"uMaterial.specular":{"target":"Material","property":"specular","type":"float3"},"uMaterial.specularPower":{"target":"Material","property":"specularPower","type":"float"},"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"},"uNormalSampler":{"target":"Material","property":"NORMAL_MAP","type":"sampler2D","path":"textures"},"uSpecularSampler":{"target":"Material","property":"SPECULAR_MAP","type":"sampler2D","path":"textures"},"uCloudSampler":{"target":"Material","property":"CLOUDS","type":"sampler2D","path":"textures"},"uNightSampler":{"target":"Material","property":"NIGHT_MAP","type":"sampler2D","path":"textures"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nstruct Light {\r\n    vec3 pos;\r\n    vec3 dir;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    vec3 att;\r\n    float range;\r\n    float spotPower;\r\n    float type;\r\n};\r\n\r\nstruct Material {\r\n    vec4 diffuse;\r\n    vec3 specular;\r\n    float specularPower;\r\n};\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec3 v_tangentW;\r\nin vec3 v_binormalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nuniform Light uLight;\r\nuniform vec3 uAmbient;\r\nuniform vec3 uEyePos;\r\nuniform Material uMaterial;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\nuniform sampler2D uNormalSampler;\r\nuniform sampler2D uCloudSampler;\r\nuniform sampler2D uSpecularSampler;\r\nuniform sampler2D uNightSampler;\r\n\r\nout vec4 Color;\r\n\r\nvec4 lit(float NdotL, float NdotH, float m){\r\n\r\n  float ambient = 1.0;\r\n  float diffuse = max(NdotL, 0.0);\r\n  float specular = step(0.0, NdotL) * max(NdotH, 0.0);\r\n  specular = pow(specular, m);\r\n  return vec4(ambient, diffuse, specular, 1.0);\r\n}\r\n\r\nvec3 DirectionalLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n\tvec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = -uLight.dir;\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\t//add diffuse contribution\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\r\n      // Add ground lights if the area is not in sunlight\r\n    float sunlitRatio = clamp(2.0 * nDotL, 0.0, 1.0);\r\n    vec4 nightColor = texture(uNightSampler, v_texCoord);\r\n    color \u002B= mix(nightColor.rgb, color, vec3( sunlitRatio, sunlitRatio, sunlitRatio));\r\n\r\n     // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * vec3(0.3, 0.5, 1.0) * pow(atmosphereRatio, 2.0);\r\n\r\n    return color;\r\n}\r\n\r\nvec3 PointLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n    vec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = uLight.pos - v_positionW;\r\n\t// The distance from Surface to Light.\r\n\tfloat d = length(lightDir);\r\n\r\n\tif( d \u003E uLight.range ) \r\n        return vec3(0.0f, 0.0f, 0.0f);\r\n\t\r\n    // Normalize the Light vector.\r\n\tlightDir /= d;\t\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\tcolor /=  dot(uLight.att, vec3(1.0f, d, d*d));\r\n\r\n       // Add ground lights if the area is not in sunlight\r\n    float sunlitRatio = clamp(2.0 * nDotL, 0.0, 1.0);\r\n    vec4 nightColor = texture(uNightSampler, v_texCoord);\r\n    color \u002B= mix(nightColor.rgb, color, vec3( sunlitRatio, sunlitRatio, sunlitRatio));\r\n\r\n      // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * vec3(0.3, 0.5, 1.0) * pow(atmosphereRatio, 2.0);\r\n    \r\n    return color;\r\n}\r\n\r\nvec3 normalMap(){\r\n    // Fetch the tangent space normal from normal map\r\n    vec3 normal = texture( uNormalSampler, v_texCoord).xyz;\r\n    \r\n    // Scale and bias from [0, 1] to [\u22121, 1]\r\n     normal = (normal * 2.0) - 1.0;\r\n\r\n    // Construct a matrix to transform from tangent to\r\n    // world space\r\n    mat3 tangentToWorldMat = mat3( v_tangentW, v_binormalW, v_normalW );\r\n    // Transform normal to world space and normalize\r\n    normal = normalize( tangentToWorldMat * normal );\r\n    \r\n    return normal;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec3 normal = normalMap();\r\n    vec4 diffuse  = texture(uDiffuseSampler, v_texCoord);\r\n    diffuse *= uMaterial.diffuse;\r\n\r\n    diffuse.rgb \u002B= texture(uCloudSampler, v_texCoord).rgb * 0.8;\r\n\r\n    vec3 specular = texture(uSpecularSampler, v_texCoord).rgb * uMaterial.specular;\r\n\r\n    Color.rgb \u002B= uLight.type == 1.0f? \r\n            DirectionalLight(normal, diffuse.rgb, specular, uMaterial.specularPower): \r\n            PointLight(normal, diffuse.rgb, specular, uMaterial.specularPower);\r\n    Color.a = diffuse.a;\r\n}\r\n"}},"normal-map":{"name":"normal-map","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uLight.pos":{"target":"LightComponent","property":"worldPosition","type":"float3"},"uLight.dir":{"target":"LightComponent","property":"worldDirection","type":"float3"},"uLight.diffuse":{"target":"Light","property":"diffuse","type":"float3"},"uLight.specular":{"target":"Light","property":"specular","type":"float3"},"uLight.spotPower":{"target":"Light","property":"spotPower","type":"float"},"uAmbient":{"target":"Light","property":"ambient","type":"float3"},"uLight.att":{"target":"Light","property":"attenuation","type":"float3"},"uLight.range":{"target":"Light","property":"range","type":"float"},"uLight.type":{"target":"Light","property":"type","type":"float"},"uHemisphereLight.skyColor":{"target":"AmbientLight","property":"skyColor","type":"float3"},"uHemisphereLight.groundColor":{"target":"AmbientLight","property":"groundColor","type":"float3"},"uHemisphereLight.northPole":{"target":"AmbientLight","property":"northPole","type":"float3"},"uEyePos":{"target":"Camera","property":"position","type":"float3"},"uMaterial.diffuse":{"target":"Material","property":"diffuse","type":"float4"},"uMaterial.specular":{"target":"Material","property":"specular","type":"float3"},"uMaterial.specularPower":{"target":"Material","property":"specularPower","type":"float"},"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"},"uNormalSampler":{"target":"Material","property":"NORMAL_MAP","type":"sampler2D","path":"textures"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nstruct Light {\r\n    vec3 pos;\r\n    vec3 dir;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    vec3 att;\r\n    float range;\r\n    float spotPower;\r\n    float type;\r\n};\r\nstruct Hemispherical {\r\n    vec3 skyColor;\r\n    vec3 groundColor;\r\n    vec3 northPole;\r\n};\r\n\r\nstruct Material {\r\n    vec4 diffuse;\r\n    vec3 specular;\r\n    float specularPower;\r\n};\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec3 v_tangentW;\r\nin vec3 v_binormalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nuniform Light uLight;\r\nuniform Hemispherical uHemisphereLight;\r\nuniform vec3 uAmbient;\r\nuniform vec3 uEyePos;\r\nuniform Material uMaterial;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\nuniform sampler2D uNormalSampler;\r\n\r\nout vec4 Color;\r\n\r\nvec4 lit(float NdotL, float NdotH, float m){\r\n\r\n  float ambient = 1.0;\r\n  float diffuse = max(NdotL, 0.0);\r\n  float specular = step(0.0, NdotL) * max(NdotH, 0.0);\r\n  specular = pow(specular, m);\r\n  return vec4(ambient, diffuse, specular, 1.0);\r\n}\r\n\r\n\r\nvec3 ComputeHemisphere()\r\n{\r\n\tfloat k = 0.5f \u002B 0.5f * dot(v_normalW, uHemisphereLight.northPole);\r\n\treturn mix(uHemisphereLight.groundColor ,uHemisphereLight.skyColor , k) * ( v_occ);\t\r\n}\r\n\r\n\r\nvec3 DirectionalLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n\tvec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = -uLight.dir;\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\t//add diffuse contribution\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\t\r\n    return color;\r\n}\r\n\r\nvec3 PointLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n    vec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = uLight.pos - v_positionW;\r\n\t// The distance from Surface to Light.\r\n\tfloat d = length(lightDir);\r\n\r\n\tif( d \u003E uLight.range ) \r\n        return vec3(0.0f, 0.0f, 0.0f);\r\n\t\r\n    // Normalize the Light vector.\r\n\tlightDir /= d;\t\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\tcolor /=  dot(uLight.att, vec3(1.0f, d, d*d));\r\n    return color;\r\n}\r\n\r\nvec3 normalMap(){\r\n    // Fetch the tangent space normal from normal map\r\n    vec3 normal = texture( uNormalSampler, v_texCoord).xyz;\r\n    \r\n    // Scale and bias from [0, 1] to [\u22121, 1]\r\n     normal = (normal * 2.0) - 1.0;\r\n\r\n    // Construct a matrix to transform from tangent to\r\n    // world space\r\n    mat3 tangentToWorldMat = mat3( v_tangentW, v_binormalW, v_normalW );\r\n    // Transform normal to world space and normalize\r\n    normal = normalize( tangentToWorldMat * normal );\r\n    \r\n    return normal;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec3 normal = normalMap();\r\n    vec4 diffuse  = texture(uDiffuseSampler, v_texCoord);\r\n    diffuse *= uMaterial.diffuse;\r\n\r\n    Color = diffuse;\r\n    Color.rgb *= ComputeHemisphere();\r\n    Color.rgb \u002B= uLight.type == 1.0f? \r\n         DirectionalLight(normal, diffuse.rgb, uMaterial.specular, uMaterial.specularPower) :\r\n         PointLight(normal, diffuse.rgb, uMaterial.specular, uMaterial.specularPower);\r\n}"}},"planet-normal":{"name":"planet-normal","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uLight.pos":{"target":"LightComponent","property":"worldPosition","type":"float3"},"uLight.dir":{"target":"LightComponent","property":"worldDirection","type":"float3"},"uLight.diffuse":{"target":"Light","property":"diffuse","type":"float3"},"uLight.specular":{"target":"Light","property":"specular","type":"float3"},"uLight.spotPower":{"target":"Light","property":"spotPower","type":"float"},"uLight.att":{"target":"Light","property":"attenuation","type":"float3"},"uLight.range":{"target":"Light","property":"range","type":"float"},"uLight.type":{"target":"Light","property":"type","type":"float"},"uAmbient":{"target":"AmbientLight","property":"ambientColor","type":"float3"},"uEyePos":{"target":"Camera","property":"position","type":"float3"},"uMaterial.diffuse":{"target":"Material","property":"diffuse","type":"float4"},"uMaterial.specular":{"target":"Material","property":"specular","type":"float3"},"uMaterial.specularPower":{"target":"Material","property":"specularPower","type":"float"},"uAtmosphere":{"target":"Planet","property":"atmosphere","type":"float3"},"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"},"uNormalSampler":{"target":"Material","property":"NORMAL_MAP","type":"sampler2D","path":"textures"},"uCloudSampler":{"target":"Material","property":"CLOUDS","type":"sampler2D","path":"textures"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nstruct Light {\r\n    vec3 pos;\r\n    vec3 dir;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    vec3 att;\r\n    float range;\r\n    float spotPower;\r\n    float type;\r\n};\r\nstruct Material {\r\n    vec4 diffuse;\r\n    vec3 specular;\r\n    float specularPower;\r\n};\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec3 v_tangentW;\r\nin vec3 v_binormalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nuniform Light uLight;\r\nuniform vec3 uAmbient;\r\nuniform vec3 uEyePos;\r\nuniform Material uMaterial;\r\nuniform vec3 uAtmosphere;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\nuniform sampler2D uNormalSampler;\r\nuniform sampler2D uCloudSampler;\r\n\r\nout vec4 Color;\r\n\r\nvec4 lit(float NdotL, float NdotH, float m){\r\n\r\n  float ambient = 1.0;\r\n  float diffuse = max(NdotL, 0.0);\r\n  float specular = step(0.0, NdotL) * max(NdotH, 0.0);\r\n  specular = pow(specular, m);\r\n  return vec4(ambient, diffuse, specular, 1.0);\r\n}\r\n\r\nvec3 DirectionalLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n\tvec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = -uLight.dir;\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\t//add diffuse contribution\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;   \r\n\r\n        // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * uAtmosphere * pow(atmosphereRatio, 2.0);\r\n\r\n    return color;\r\n}\r\n\r\nvec3 PointLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n    vec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = uLight.pos - v_positionW;\r\n\t// The distance from Surface to Light.\r\n\tfloat d = length(lightDir);\r\n\r\n\tif( d \u003E uLight.range ) \r\n        return vec3(0.0f, 0.0f, 0.0f);\r\n\t\r\n    // Normalize the Light vector.\r\n\tlightDir /= d;\t\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\tcolor /=  dot(uLight.att, vec3(1.0f, d, d*d));\r\n\r\n      // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * uAtmosphere * pow(atmosphereRatio, 2.0);\r\n    \r\n    return color;\r\n}\r\n\r\n\r\nvec3 normalMap(){\r\n    // Fetch the tangent space normal from normal map\r\n    vec3 normal = texture( uNormalSampler, v_texCoord).xyz;\r\n    \r\n    // Scale and bias from [0, 1] to [\u22121, 1]\r\n     normal = (normal * 2.0) - 1.0;\r\n\r\n    // Construct a matrix to transform from tangent to\r\n    // world space\r\n    mat3 tangentToWorldMat = mat3( v_tangentW, v_binormalW, v_normalW );\r\n    // Transform normal to world space and normalize\r\n    normal = normalize( tangentToWorldMat * normal );\r\n    \r\n    return normal;\r\n}\r\n\r\nvoid main() \r\n{\r\n    vec3 normal = normalMap();\r\n    vec4 diffuse  = texture(uDiffuseSampler, v_texCoord);\r\n    diffuse *= uMaterial.diffuse;\r\n\r\n    diffuse.rgb \u002B= texture(uCloudSampler, v_texCoord).rgb * 0.8;\r\n\r\n    vec3 specular = 0.5 * uMaterial.specular;  \r\n    \r\n    Color.rgb \u002B= uLight.type == 1.0f? \r\n            DirectionalLight(normal, diffuse.rgb, specular, uMaterial.specularPower): \r\n            PointLight(normal, diffuse.rgb, specular, uMaterial.specularPower);\r\n\r\n    Color.a = diffuse.a;\r\n}\r\n"}},"planet":{"name":"planet","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uLight.pos":{"target":"LightComponent","property":"worldPosition","type":"float3"},"uLight.dir":{"target":"LightComponent","property":"worldDirection","type":"float3"},"uLight.diffuse":{"target":"Light","property":"diffuse","type":"float3"},"uLight.specular":{"target":"Light","property":"specular","type":"float3"},"uLight.spotPower":{"target":"Light","property":"spotPower","type":"float"},"uLight.att":{"target":"Light","property":"attenuation","type":"float3"},"uLight.range":{"target":"Light","property":"range","type":"float"},"uLight.type":{"target":"Light","property":"type","type":"float"},"uAmbient":{"target":"AmbientLight","property":"ambientColor","type":"float3"},"uEyePos":{"target":"Camera","property":"position","type":"float3"},"uMaterial.diffuse":{"target":"Material","property":"diffuse","type":"float4"},"uMaterial.specular":{"target":"Material","property":"specular","type":"float3"},"uMaterial.specularPower":{"target":"Material","property":"specularPower","type":"float"},"uAtmosphere":{"target":"Planet","property":"atmosphere","type":"float3"},"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"},"uCloudSampler":{"target":"Material","property":"CLOUDS","type":"sampler2D","path":"textures"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nstruct Light {\r\n    vec3 pos;\r\n    vec3 dir;\r\n    vec3 diffuse;\r\n    vec3 specular;\r\n    vec3 att;\r\n    float range;\r\n    float spotPower;\r\n    float type;\r\n};\r\n\r\nstruct Material {\r\n    vec4 diffuse;\r\n    vec3 specular;\r\n    float specularPower;\r\n};\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec3 v_tangentW;\r\nin vec3 v_binormalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nuniform Light uLight;\r\nuniform vec3 uAmbient;\r\nuniform vec3 uEyePos;\r\nuniform Material uMaterial;\r\nuniform vec3 uAtmosphere;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\nuniform sampler2D uCloudSampler;\r\n\r\nout vec4 Color;\r\n\r\nvec4 lit(float NdotL, float NdotH, float m){\r\n\r\n  float ambient = 1.0;\r\n  float diffuse = max(NdotL, 0.0);\r\n  float specular = step(0.0, NdotL) * max(NdotH, 0.0);\r\n  specular = pow(specular, m);\r\n  return vec4(ambient, diffuse, specular, 1.0);\r\n}\r\n\r\nvec3 DirectionalLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n\tvec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = -uLight.dir;\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\t//add diffuse contribution\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;   \r\n\r\n     // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * uAtmosphere * pow(atmosphereRatio, 2.0);\r\n\r\n    return color;\r\n}\r\n\r\n\r\nvec3 PointLight(vec3 normal, vec3 diffuse, vec3 specular, float specularPower)\r\n{\r\n    vec3 toEye = normalize(uEyePos - v_positionW);\t\r\n    vec3 lightDir = uLight.pos - v_positionW;\r\n\t// The distance from Surface to Light.\r\n\tfloat d = length(lightDir);\r\n\r\n\tif( d \u003E uLight.range ) \r\n        return vec3(0.0f, 0.0f, 0.0f);\r\n\t\r\n    // Normalize the Light vector.\r\n\tlightDir /= d;\t\r\n\r\n    float nDotL = dot(normal, lightDir);\r\n    vec3 reflection = (2.0 * normal * nDotL) - lightDir;\r\n    float rDotV = dot(reflection, toEye);\r\n\r\n\tvec4 l = lit(nDotL, rDotV , specularPower);\t\r\n\t\r\n\tvec3 color = (diffuse * uLight.diffuse) * l.y \u002B (specular * uLight.specular) * l.z;\r\n\tcolor /=  dot(uLight.att, vec3(1.0f, d, d*d));\r\n\r\n      // Add atmosphere\r\n    float atmosphereRatio = 1.0 - clamp( dot(toEye, normal) ,0.0, 1.0);\r\n    color.rgb \u002B= 0.30 * uAtmosphere * pow(atmosphereRatio, 2.0);\r\n    \r\n    return color;\r\n}\r\n\r\nvoid main() \r\n{   \r\n    vec4 diffuse  = texture(uDiffuseSampler, v_texCoord);\r\n    diffuse *= uMaterial.diffuse;\r\n\r\n    diffuse.rgb \u002B= texture(uCloudSampler, v_texCoord).rgb * 0.8;\r\n\r\n    vec3 specular = 0.5 * uMaterial.specular;\r\n\r\n    Color.rgb \u002B= uLight.type == 1.0f? \r\n            DirectionalLight(v_normalW, diffuse.rgb, specular, uMaterial.specularPower): \r\n            PointLight(v_normalW, diffuse.rgb, specular, uMaterial.specularPower);\r\n\r\n    Color.a = diffuse.a;\r\n}\r\n"}},"skybox":{"name":"skybox","vertexShader":{"inputs":{"POSITION":"a_position"},"parameters":{"u_View":{"target":"Camera","property":"viewMtx","type":"mat4"},"u_Proj":{"target":"Camera","property":"projMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\n\r\nuniform mat4 u_View;\r\nuniform mat4 u_Proj;\r\n\r\nout vec3 v_texCoord;\r\n\r\nvoid main(){\r\n    vec3 pos = mat3(u_View) *  a_position;    \r\n    gl_Position =  (u_Proj * vec4(pos ,1)).xyww;\r\n    v_texCoord = a_position;\r\n}"},"fragmentShader":{"parameters":{"u_CubeMap":{"target":"SkyBox","property":"texture","type":"samplerCUBE"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nin vec3 v_texCoord;\r\n\r\nuniform samplerCube u_CubeMap;\r\n\r\nout vec4 Color;\r\n\r\nvoid main(){\t\r\n   Color = texture(u_CubeMap, v_texCoord);\r\n}"}},"sun":{"name":"sun","vertexShader":{"inputs":{"POSITION":"a_position","NORMAL":"a_normal","TANGENT":"a_tangent","TEXCOORD":"a_texCoord","OCC_FACTOR":"a_occ"},"parameters":{"u_World":{"target":"Frame","property":"worldMtx","type":"mat4"},"u_WorldNormal":{"target":"Frame","property":"worldTranformNormalMtx","type":"mat4"},"u_ViewProj":{"target":"Camera","property":"viewProjMtx","type":"mat4"}},"source":"#version 300 es\r\n\r\nin vec3 a_position;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec2 a_texCoord;\r\nin float a_occ;\r\n\r\nuniform mat4 u_World;\r\nuniform mat4 u_WorldNormal;\r\nuniform mat4 u_ViewProj;\r\n\r\nout vec3 v_positionW;\r\nout vec3 v_normalW;\r\nout vec3 v_tangentW;\r\nout vec3 v_binormalW;\r\nout vec2 v_texCoord;\r\nout float v_occ;\r\nout vec4 v_screenCoord;\r\n\r\nvoid main(){\r\n    v_positionW = vec3(u_World * vec4(a_position, 1));\r\n\r\n    v_normalW = normalize(mat3(u_WorldNormal) * a_normal);    \r\n    v_tangentW = normalize(mat3(u_WorldNormal) * a_tangent);\r\n    v_binormalW = cross(v_normalW, v_tangentW);\r\n\r\n    gl_Position =  u_ViewProj * vec4(v_positionW ,1) ;\r\n\r\n    v_screenCoord.x = (gl_Position.x \u002B gl_Position.w) * 0.5f;\r\n    v_screenCoord.x = (gl_Position.w \u002B gl_Position.y) * 0.5f;\r\n    v_screenCoord.zw = gl_Position.ww;\r\n    v_texCoord = a_texCoord;\r\n    v_occ = 1.0 - a_occ;\r\n}"},"fragmentShader":{"parameters":{"uDiffuseSampler":{"target":"Material","property":"DIFFUSE_MAP","type":"sampler2D","path":"textures"},"NodeName":{"target":"Frame","property":"name","type":"none"}},"source":"#version 300 es\r\nprecision mediump float;\r\n\r\nin vec3 v_positionW;\r\nin vec3 v_normalW;\r\nin vec2 v_texCoord;\r\nin float v_occ;\r\n\r\nuniform sampler2D uDiffuseSampler;\r\n\r\nout vec4 Color;\r\n\r\nvoid main() \r\n{\r\n    Color  = texture(uDiffuseSampler, v_texCoord);\r\n    Color.rgb *= 1.8 ;\r\n    Color.rgb = clamp(Color.rgb, vec3(0.0), vec3(1.0));\r\n}"}}},"effects":{"Default":{"name":"Default","predicates":{"Mesh":{"items":[{"condition":{"op":2,"parameter":"NodeName","value":"SunStar"},"program":"sun"},{"andConditions":[{"op":1,"parameter":"uCloudSampler"},{"op":1,"parameter":"uNightSampler"},{"op":1,"parameter":"uSpecularSampler"}],"program":"earth"},{"andConditions":[{"op":1,"parameter":"uNormalSampler"},{"op":1,"parameter":"uAtmosphere"}],"program":"planet-normal"},{"andConditions":[{"op":1,"parameter":"uAtmosphere"}],"program":"planet"},{"condition":{"op":1,"parameter":"uNormalSampler"},"program":"normal-map"}]}},"programs":{"Mesh":"default","SkyBox":"skybox","Billboard":"billboard"}}}}